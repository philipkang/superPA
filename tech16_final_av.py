# -*- coding: utf-8 -*-
"""Tech16-final-av.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1P6YB2ctVcuBwLh8ev8pEduomC3-RXg25
"""

# -*- coding: utf-8 -*-
"""Video and Audio Summarizer for Colab

This script allows users to summarize YouTube videos, uploaded video files, or audio files.
"""

# Install necessary packages
!pip install -q yt-dlp pydub llama-index-readers-file ipywidgets openai
!pip install -q git+https://github.com/openai/whisper.git

import yt_dlp
import os
import subprocess
from pathlib import Path
from google.colab import files
from llama_index.readers.file import VideoAudioReader
from openai import OpenAI
import ipywidgets as widgets
from IPython.display import display
import textwrap
import mimetypes

# Global variable to track processed files
processed_files = set()

# Set up OpenAI API key
from google.colab import userdata
open_ai_key = userdata.get('OPENAI_API_KEY')
os.environ["OPENAI_API_KEY"] = open_ai_key
client = OpenAI(api_key=open_ai_key)

def download_audio(video_url, output_path='audio.wav'):
    ydl_opts = {
        'format': 'bestaudio/best',
        'outtmpl': output_path,
        'postprocessors': [{
            'key': 'FFmpegExtractAudio',
            'preferredcodec': 'wav',
            'preferredquality': '192',
        }],
    }
    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        ydl.download([video_url])

    # Check if the file was renamed
    if os.path.exists(output_path + '.wav'):
        os.rename(output_path + '.wav', output_path)

    print(f"Debug: Audio file downloaded as {output_path}")
    return output_path

def process_audio(file_path):
    print(f"Debug: Processing audio file: {file_path}")
    try:
        reader = VideoAudioReader()
        documents = reader.load_data(Path(file_path))
        transcript = documents[0].text
        print("Transcript:")
        print(transcript)

        summary = summarize_text(transcript)
        print("\nAudio/Video Summary:")
        print(textwrap.fill(summary, width=80))
    except Exception as e:
        print(f"Error processing audio: {str(e)}")
        # If there's an error with VideoAudioReader, try using whisper directly
        try:
            import whisper
            model = whisper.load_model("base")
            result = model.transcribe(file_path)
            transcript = result["text"]
            print("Transcript (using whisper directly):")
            print(transcript)

            summary = summarize_text(transcript)
            print("\nAudio/Video Summary:")
            print(textwrap.fill(summary, width=80))
        except Exception as e:
            print(f"Error processing audio with whisper: {str(e)}")

def determine_input_type(url, uploaded_file):
    if url:
        return 'youtube'
    elif uploaded_file:
        file_name = uploaded_file.get('name', '')
        print(f"Debug: File name in determine_input_type: {file_name}")

        if not file_name:
            return 'unknown'

        # Check file extension
        file_extension = os.path.splitext(file_name)[1].lower()
        print(f"Debug: File extension is {file_extension}")

        if file_extension in ['.mp4', '.avi', '.mov']:
            return 'video'
        elif file_extension in ['.mp3', '.wav', '.ogg', '.m4a']:
            return 'audio'

        # If extension check fails, try mime type
        mime_type, _ = mimetypes.guess_type(file_name)
        print(f"Debug: Detected MIME type is {mime_type}")

        if mime_type:
            if mime_type.startswith('video'):
                return 'video'
            elif mime_type.startswith('audio'):
                return 'audio'

    return 'unknown'

def process_youtube(url):
    try:
        audio_file = download_audio(url)
        if os.path.exists(audio_file):
            print(f"Debug: Audio file exists: {audio_file}")
            print(f"Debug: File size: {os.path.getsize(audio_file)} bytes")
            process_audio(audio_file)
        else:
            print(f"Error: Audio file {audio_file} not found after download")
    except Exception as e:
        print(f"An error occurred while processing YouTube URL: {str(e)}")

def process_video(file_path):
    audio_file = 'audio.wav'
    if os.path.exists(audio_file):
        os.remove(audio_file)

    os.system(f"ffmpeg -i '{file_path}' -vn -acodec pcm_s16le -ar 44100 -ac 2 '{audio_file}' -y")
    process_audio(audio_file)

from IPython.display import display, Markdown
def process_audio(file_path):
    print(f"Debug: Starting to process audio file: {file_path}")
    try:
        reader = VideoAudioReader()
        documents = reader.load_data(Path(file_path))
        transcript = documents[0].text
        print("Transcript:")
        print(transcript)

        summary = summarize_text(transcript)
        print("\nAudio/Video Summary:")
        #print(textwrap.fill(summary, width=80))
        display(Markdown(summary))
    except Exception as e:
        print(f"Error processing audio: {str(e)}")

def summarize_text(text, max_tokens=500):
    response = client.chat.completions.create(
        model="gpt-4o",
        messages=[
            {"role": "system", "content": "You are a helpful assistant that summarizes video transcripts."},
            {"role": "user", "content": f"Please summarize the following video transcript in about 250 words and be concise:\n\n{text}"}
        ],
        max_tokens=max_tokens
    )
    return response.choices[0].message.content

def handle_upload(change):
    global processed_files
    if not change['new']:
        print("No file was uploaded.")
        return

    for filename, file_info in change['new'].items():
        if filename in processed_files:
            print(f"File {filename} has already been processed. Skipping.")
            continue

        print(f"Debug: Uploaded file info: {filename}")

        file_name = file_info['metadata']['name']
        content = file_info['content']

        print(f"Debug: File name is {file_name}")

        if not content:
            print("The uploaded file is empty.")
            continue

        with open(file_name, 'wb') as f:
            f.write(content)

        input_type = determine_input_type('', {'name': file_name})
        print(f"Debug: Determined input type is {input_type}")

        if input_type == 'video':
            process_video(file_name)
        elif input_type == 'audio':
            process_audio(file_name)
        else:
            print(f"Unsupported file type: {file_name}. Please upload an MP4 video or MP3/WAV audio file.")

        processed_files.add(filename)

def delete_uploaded_files(b):
    global processed_files
    for file in os.listdir():
        if file.endswith(('.mp4', '.mp3', '.wav', '.wav')):
            os.remove(file)
    processed_files.clear()  # Clear the set of processed files
    print("All uploaded files have been deleted and the processed files list has been cleared.")
    print("Ready for new input. Please enter a YouTube URL or upload new files.")

# Widgets
url_input = widgets.Text(
    value='',
    placeholder='Enter YouTube video URL',
    description='YouTube URL:',
    disabled=False
)

upload_button = widgets.FileUpload(
    accept=".mp4,.mp3,.wav",
    multiple=True
)

process_button = widgets.Button(
    description='Process Media',
    disabled=False,
    button_style='',
    tooltip='Click to process the media'
)

delete_button = widgets.Button(
    description='Delete Uploaded Files',
    disabled=False,
    button_style='danger',
    tooltip='Click to delete all uploaded files'
)

def on_button_click(b):
    global processed_files
    url = url_input.value
    uploaded_files = upload_button.value

    if not url and not uploaded_files:
        print("Please enter a YouTube video URL or upload a video (MP4) or audio (MP3/WAV) file.")
        return

    if url:
        process_youtube(url)
    elif uploaded_files:
        for filename, file_info in uploaded_files.items():
            if filename in processed_files:
                print(f"File {filename} has already been processed. Skipping.")
                continue

            file_name = file_info['metadata']['name']
            input_type = determine_input_type('', {'name': file_name})

            try:
                if input_type == 'video':
                    process_video(file_name)
                elif input_type == 'audio':
                    process_audio(file_name)
                else:
                    print(f"Unsupported file type: {file_name}. Please upload an MP4 video or MP3/WAV audio file.")

                processed_files.add(filename)
            except Exception as e:
                print(f"An error occurred while processing {file_name}: {str(e)}")
    else:
        print("Unsupported input type. Please enter a YouTube video URL or upload a video (MP4) or audio (MP3/WAV) file.")

    # Clear the widgets
    url_input.value = ''
    upload_button.value.clear()
    upload_button._counter = 0

# Link button clicks to functions
process_button.on_click(on_button_click)
delete_button.on_click(delete_uploaded_files)

# Display widgets
display(url_input)
display(upload_button)
display(process_button)
display(delete_button)

# Observe file upload
upload_button.observe(handle_upload, names='value')

# video_url:  "https://youtu.be/IxbR0yTMMY8?si=c5oTph_rRV2Sk_Gq"